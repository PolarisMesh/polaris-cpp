syntax = "proto3";

package v1;

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "v1/service.proto";

message DiscoverRequest {
	enum DiscoverRequestType {
		UNKNOWN = 0;
		INSTANCE = 1;
		CLUSTER = 2;
		ROUTING = 3;
		RATE_LIMIT = 4;
		CIRCUIT_BREAKER = 5;
	}

	DiscoverRequestType type = 1;
	Service service = 2;
}


// SDK上报的API调用统计
message SDKAPIStatistics {
	google.protobuf.StringValue id = 1; // 唯一标识
	SDKAPIStatisticsKey key = 2; // 维度
	Indicator value = 3; // 指标
}

message SDKAPIStatisticsKey {
	google.protobuf.StringValue client_host = 1; // SDK的ip
	google.protobuf.StringValue sdk_api = 2; // 被调用的api
	google.protobuf.StringValue res_code = 3; // 调用结果码，如果有错误，那么就是具体的错误码，否则为0，表示成功
	google.protobuf.BoolValue success = 4; // API调用是否成功
	google.protobuf.StringValue delay_range = 5; // 操作延迟范围，如[3ms, 10ms)
	google.protobuf.StringValue client_version = 6; // 版本号
	google.protobuf.StringValue client_type = 7; // polaris-cpp
	APIResultType result = 8; //api接口调用的的返回类型
	string uid = 9;
}

//api接口调用
enum APIResultType {
	//未知原因，更新pb后的sdk不得上报这种类型，用于兼容旧版本sdk
	UnknownType = 0;
	//用户调用成功
	Success = 1;
	//由于用户的原因，如参数错误导致的调用错误
	UserFail = 2;
	//由于系统原因（sdk或者server）导致用户调用失败
	PolarisFail = 3;
}

// server和sdk的上报指标
message Indicator {
	google.protobuf.UInt32Value total_request_per_minute = 1; //总请求数
}

// SDK上报的服务调用统计
message ServiceStatistics {
	google.protobuf.StringValue id = 1; // 唯一标识
	ServiceStatisticsKey key = 2; // 维度
	ServiceIndicator value = 3; // 指标
	SDKToken sdk_token = 4; // sdk标识
}

// 服务调用的上报维度
message ServiceStatisticsKey {
	google.protobuf.StringValue caller_host = 1; // 该服务调用者的IP
	google.protobuf.StringValue namespace = 2; // 命名空间
	google.protobuf.StringValue service = 3; // 服务名
	google.protobuf.StringValue instance_host = 4; //具体服务实例ip
	google.protobuf.BoolValue success = 5; // 服务调用是否成功
	int32 res_code = 6; // 服务调用返回码
}

// 服务调用的上报指标
message ServiceIndicator {
	google.protobuf.UInt32Value total_request_per_minute = 1; // 总请求数
	google.protobuf.UInt64Value total_delay_per_minute = 2; // 总延迟
}

// SDK的唯一标识
message SDKToken {
	string ip = 1;
	uint32 pid = 2;
	string uid = 3;
	string client = 4;
	string version = 5;
	//该sdkContext所属进程运行的容器pod
	string pod_name = 6;
	//该sdkContext所属进程所属容器或者机器的hostname
	string host_name = 7;
}

// SDK的配置信息
message SDKConfig {
	SDKToken token = 1;
	string config = 2;
	google.protobuf.Timestamp take_effect_time = 3;
	string location = 4;
	string version = 5;
	string client = 6;
  google.protobuf.Timestamp init_finish_time = 8;
  google.protobuf.Timestamp report_time = 9;
}


//一次版本号变更
message RevisionHistory {
	//变更时间
	google.protobuf.Timestamp time = 1;
	//变更的次序
	uint32 change_seq = 2;
	//变更后版本号
	string revision = 3;
}

//路由变更历史
message RoutingHistory {
	//版本号变更
	repeated RevisionHistory revision = 1;
}

//实例变更历史
message InstancesHistory {
	//版本号变更
	repeated RevisionHistory revision = 1;
}

//一个单独限流规则（具备一个ruleId）的变更历史
message SingleRateLimitRuleHistory {
	string rule_id = 1;
	repeated RevisionHistory revision = 2;
}

//限流规则（各个单独限流规则的汇总）变更历史
message RateLimitHistory {
	//版本号变更
	repeated RevisionHistory revision = 1;
}

//上报的服务信息
message ServiceInfo {
	//该条记录的唯一id
	string id = 1;
	//sdk标识
	SDKToken sdk_token = 2;
	string namespace = 3;
	string service = 4;
	//服务实例的版本变化
	InstancesHistory instances_history = 5;
	//服务的实例数据已从sdk中删除（过期淘汰或者server删除了）
	bool instance_eliminated = 6;
	//该服务对应的路由变化情况
	RoutingHistory routing_history = 7;
	//服务的路由数据已从sdk中删除（过期淘汰或者server删除了）
	bool routing_eliminated = 8;
	//服务对应的限流规则版本
	RateLimitHistory rate_limit_history = 9;
	//各个单独限流规则的版本变更历史
	repeated SingleRateLimitRuleHistory single_rate_limit_histories = 10;
	//服务的限流规则数据已从sdk中删除（过期淘汰或者server删除了）
	bool rate_limit_eliminated = 11;
}

//熔断状态变更类型
enum StatusChange {
	StatusChangeUnknown = 0;
	StatusChangeCloseToOpen = 1;
	StatusChangeOpenToHalfOpen = 2;
	StatusChangeHalfOpenToOpen = 3;
	StatusChangeHalfOpenToClose = 4;
	StatusChangeCloseToPreserved = 5;
	StatusChangePreservedToClose = 6;
	StatusChangePreservedToOpen = 7;
}

enum RecoverAllStatus {
	RecoverAllStatusInvalid = 0;
	//发生了全死全活
	RecoverAllStatusStart = 1;
	//全死全活结束（由于服务实例状态的改变）
	RecoverAllStatusEnd = 2;
}

//实例的一次熔断状态改变
message CircuitbreakChange {
	//变更时间
	google.protobuf.Timestamp time = 1;
	//变更的次序
	uint32 change_seq = 2;
	//状态变更类型
	StatusChange change = 3;
	//状态变更原因
	string reason = 4;
}

//实例的周期熔断变更历史
message CircuitbreakHistory {
	string ip = 1;
	uint32 port = 2;
	string vpc_id = 3;
	repeated CircuitbreakChange changes = 4;
	string labels = 5;
	string ruleId = 6;
}

//针对subset的周期变更历史
message SubsetCbHistory {
	string subset = 1;
	string labels = 2;
	string ruleId = 3;
	repeated CircuitbreakChange changes = 4;
}


//全死全活状态
message RecoverAllChange {
	//发生全死全活时间
	google.protobuf.Timestamp time = 1;
	//发生全死全活的实例集合的信息，如共同metadata、共同位置等
	string instance_info = 2;
	//全死全活是发生了还是结束了
	RecoverAllStatus change = 3;
}

//一个服务一个周期的熔断变化情况
message ServiceCircuitbreak {
	//该条记录的唯一id
	string id = 1;
	//sdk标识
	SDKToken sdk_token = 2;
	string namespace = 3;
	string service = 4;
	//发生全死全活的情况
	repeated RecoverAllChange recover_all = 5;
	//实例熔断情况
	repeated CircuitbreakHistory instance_circuitbreak = 6;
	//subset熔断情况
	repeated SubsetCbHistory subset_circuitbreak = 7;
}

enum LimitMode {
  //未知类型，用于兼容前面pb
  UnknownMode = 0;
  //全局类型，与限流server发生交互
  GlobalMode = 1;
  //本地类型，使用本地限流算法
  LocalMode = 2;
  //降级类型，因为无法连接限流server，导致必须使用本地限流算法
  DegradeMode = 3;
}

//被限流的统计
message LimitStat {
  google.protobuf.Timestamp time = 1;
  //限流次数
  uint32 period_times = 2;
  //限流原因，每种原因一个limitStat
  string reason = 3;
  //限流发生时处于哪种模式
  LimitMode mode = 4;
  //通过请求数
  uint32 pass = 5;
  //限流周期，单位为s
  uint32 limit_duration = 6;
}

message ThresholdChange {
  google.protobuf.Timestamp time = 1;
  string oldThreshold = 2;
  string newThreshold = 3;
  string reason = 4;
}

//限流记录
message RateLimitRecord {
  //该条记录的唯一id
  string id = 1;
  //sdk标识
  SDKToken sdk_token = 2;
  //服务命名空间
  string namespace = 3;
  //服务名
  string service = 4;
  //规则id
  string rule_id = 5;
  //规则生效集群
  string subset = 6;
  //限流器
  string rate_limiter = 7;
  //限流的接口，使用不同lables代表不同接口
  string labels = 8;
  //周期限流次数
  repeated LimitStat limit_stats = 9;
  //阈值变化事件
  repeated ThresholdChange threshold_changes = 10;
}

//路由调用结果
message RouteResult {
	//返回码
	string ret_code = 1;
	//一个周期内的这种返回码的调用次数
	uint32 period_times = 2;
	//路由状态，如是否发生了就近降级，是否是全活状态
	string route_status = 3;
	//路由返回的cluster结果
	string cluster = 4;
}

//路由规则调用记录
message RouteRecord {
	//使用这个规则的插件名字
	string plugin_name = 1;
	//各种不同返回码的结果
	repeated RouteResult results = 2;
	//主调服务命名空间
	string src_namespace = 3;
	//主调服务名
	string src_service = 4;
	// 规则类型，现在就规则路由要区分主调规则还是被调规则
	enum RuleType {
			Unknown = 0;
			DestRule = 1;
			SrcRule = 2;
	}
	RuleType rule_type = 5;
}

//一个服务不同类型路由规则调用记录
message ServiceRouteRecord {
	//该条记录的唯一id
	string id = 1;
	//sdk标识
	SDKToken sdk_token = 2;
	//命名空间
	string namespace = 3;
	//服务名
	string service = 4;
	//上报的时间
	google.protobuf.Timestamp time = 5;
	//路由规则调用记录
	repeated RouteRecord records = 6;
}
